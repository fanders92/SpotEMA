//
//  KRWDrunkButtonStyleKit.swift
//  Spot
//
//  Created by Konstantin Wachendorff on 30/12/14.
//  Copyright (c) 2014 QApp. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class KRWDrunkButtonStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var kRWDrunkButtonColor: UIColor = UIColor(red: 0.163, green: 0.329, blue: 0.688, alpha: 1.000)
        static var kRWDrunkButtonColorClicked: UIColor = KRWDrunkButtonStyleKit.kRWDrunkButtonColor.colorWithBrightness(1)
    }

    //// Colors

    public class var kRWDrunkButtonColor: UIColor { return Cache.kRWDrunkButtonColor }
    public class var kRWDrunkButtonColorClicked: UIColor { return Cache.kRWDrunkButtonColorClicked }

    //// Drawing Methods

    public class func drawKRWDrunkButtonNormal() {

        //// KRWDrunkButton Drawing
        var kRWDrunkButtonPath = UIBezierPath()
        kRWDrunkButtonPath.moveToPoint(CGPointMake(10, 40))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(240, 40))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(240, 10))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(10, 10))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(10, 40))
        kRWDrunkButtonPath.closePath()
        kRWDrunkButtonPath.lineJoinStyle = kCGLineJoinRound;

        KRWDrunkButtonStyleKit.kRWDrunkButtonColor.setFill()
        kRWDrunkButtonPath.fill()
        KRWDrunkButtonStyleKit.kRWDrunkButtonColor.setStroke()
        kRWDrunkButtonPath.lineWidth = 20
        kRWDrunkButtonPath.stroke()


        //// KRWDrunkButtonText Drawing
        let kRWDrunkButtonTextRect = CGRectMake(10, 10, 230, 30)
        let kRWDrunkButtonTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        kRWDrunkButtonTextStyle.alignment = NSTextAlignment.Center

        let kRWDrunkButtonTextFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 25)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: kRWDrunkButtonTextStyle]

        "I am Drunk!".drawInRect(kRWDrunkButtonTextRect, withAttributes: kRWDrunkButtonTextFontAttributes)
    }

    public class func drawKRWDrunkButtonClicked() {

        //// KRWDrunkButton Drawing
        var kRWDrunkButtonPath = UIBezierPath()
        kRWDrunkButtonPath.moveToPoint(CGPointMake(10, 40))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(240, 40))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(240, 10))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(10, 10))
        kRWDrunkButtonPath.addLineToPoint(CGPointMake(10, 40))
        kRWDrunkButtonPath.closePath()
        kRWDrunkButtonPath.lineJoinStyle = kCGLineJoinRound;

        KRWDrunkButtonStyleKit.kRWDrunkButtonColorClicked.setFill()
        kRWDrunkButtonPath.fill()
        KRWDrunkButtonStyleKit.kRWDrunkButtonColorClicked.setStroke()
        kRWDrunkButtonPath.lineWidth = 20
        kRWDrunkButtonPath.stroke()


        //// KRWDrunkButtonText Drawing
        let kRWDrunkButtonTextRect = CGRectMake(10, 10, 230, 30)
        let kRWDrunkButtonTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        kRWDrunkButtonTextStyle.alignment = NSTextAlignment.Center

        let kRWDrunkButtonTextFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 25)!, NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: kRWDrunkButtonTextStyle]

        "I am Drunk!".drawInRect(kRWDrunkButtonTextRect, withAttributes: kRWDrunkButtonTextFontAttributes)
    }

    public class func drawKRWHomeButtonNormal() {
        //// Color Declarations
        let kRWHomeButtonColor = UIColor(red: 0.826, green: 0.748, blue: 0.366, alpha: 1.000)

        //// KRWHomeButton Drawing
        var kRWHomeButtonPath = UIBezierPath()
        kRWHomeButtonPath.moveToPoint(CGPointMake(10, 90))
        kRWHomeButtonPath.addLineToPoint(CGPointMake(90, 90))
        kRWHomeButtonPath.addLineToPoint(CGPointMake(90, 10))
        kRWHomeButtonPath.addLineToPoint(CGPointMake(10, 10))
        kRWHomeButtonPath.addLineToPoint(CGPointMake(10, 90))
        kRWHomeButtonPath.closePath()
        kRWHomeButtonPath.lineJoinStyle = kCGLineJoinRound;

        kRWHomeButtonColor.setFill()
        kRWHomeButtonPath.fill()
        kRWHomeButtonColor.setStroke()
        kRWHomeButtonPath.lineWidth = 20
        kRWHomeButtonPath.stroke()


        //// KRWHomeButtonHouse Drawing
        var kRWHomeButtonHousePath = UIBezierPath()
        kRWHomeButtonHousePath.moveToPoint(CGPointMake(50.5, 13.5))
        kRWHomeButtonHousePath.addCurveToPoint(CGPointMake(80.62, 39.77), controlPoint1: CGPointMake(50.5, 13.5), controlPoint2: CGPointMake(80.62, 39.77))
        kRWHomeButtonHousePath.addCurveToPoint(CGPointMake(80.56, 39.99), controlPoint1: CGPointMake(80.62, 39.77), controlPoint2: CGPointMake(80.6, 39.84))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(81, 39.99))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(81, 83))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(20, 83))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(20, 39.99))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(20.44, 39.99))
        kRWHomeButtonHousePath.addCurveToPoint(CGPointMake(20.38, 39.77), controlPoint1: CGPointMake(20.4, 39.84), controlPoint2: CGPointMake(20.38, 39.77))
        kRWHomeButtonHousePath.addCurveToPoint(CGPointMake(27.72, 33.37), controlPoint1: CGPointMake(20.38, 39.77), controlPoint2: CGPointMake(23.49, 37.05))
        kRWHomeButtonHousePath.addCurveToPoint(CGPointMake(50.5, 13.5), controlPoint1: CGPointMake(36.63, 25.59), controlPoint2: CGPointMake(50.5, 13.5))
        kRWHomeButtonHousePath.addLineToPoint(CGPointMake(50.5, 13.5))
        kRWHomeButtonHousePath.closePath()
        kRWHomeButtonHousePath.lineJoinStyle = kCGLineJoinRound;

        KRWDrunkButtonStyleKit.kRWDrunkButtonColor.setFill()
        kRWHomeButtonHousePath.fill()
        KRWDrunkButtonStyleKit.kRWDrunkButtonColor.setStroke()
        kRWHomeButtonHousePath.lineWidth = 6
        kRWHomeButtonHousePath.stroke()


        //// KRWHomeButtonHouseWindow Drawing
        let kRWHomeButtonHouseWindowPath = UIBezierPath(roundedRect: CGRectMake(27, 45, 19, 17), cornerRadius: 4)
        kRWHomeButtonColor.setFill()
        kRWHomeButtonHouseWindowPath.fill()


        //// KRWHomeButtonHouseDoor Drawing
        let kRWHomeButtonHouseDoorPath = UIBezierPath(roundedRect: CGRectMake(55, 45, 19, 33), cornerRadius: 4)
        kRWHomeButtonColor.setFill()
        kRWHomeButtonHouseDoorPath.fill()
    }

    public class func drawKRWContactButtonNormal() {
        //// Color Declarations
        let kRWHomeButtonColor = UIColor(red: 0.826, green: 0.748, blue: 0.366, alpha: 1.000)
        let kRWContactButtonColor = UIColor(red: 0.820, green: 0.339, blue: 0.339, alpha: 1.000)

        //// KRWContactButton Drawing
        var kRWContactButtonPath = UIBezierPath()
        kRWContactButtonPath.moveToPoint(CGPointMake(10, 90))
        kRWContactButtonPath.addLineToPoint(CGPointMake(90, 90))
        kRWContactButtonPath.addLineToPoint(CGPointMake(90, 10))
        kRWContactButtonPath.addLineToPoint(CGPointMake(10, 10))
        kRWContactButtonPath.addLineToPoint(CGPointMake(10, 90))
        kRWContactButtonPath.closePath()
        kRWContactButtonPath.lineJoinStyle = kCGLineJoinRound;

        kRWContactButtonColor.setFill()
        kRWContactButtonPath.fill()
        kRWContactButtonColor.setStroke()
        kRWContactButtonPath.lineWidth = 20
        kRWContactButtonPath.stroke()


        //// Oval 2 Drawing
        var oval2Path = UIBezierPath()
        oval2Path.moveToPoint(CGPointMake(74.49, 89.47))
        oval2Path.addCurveToPoint(CGPointMake(74.73, 61.59), controlPoint1: CGPointMake(91.5, 88.77), controlPoint2: CGPointMake(88.01, 70.39))
        oval2Path.addCurveToPoint(CGPointMake(26.62, 61.59), controlPoint1: CGPointMake(61.44, 52.8), controlPoint2: CGPointMake(39.9, 52.8))
        oval2Path.addCurveToPoint(CGPointMake(26.86, 89.47), controlPoint1: CGPointMake(13.33, 70.39), controlPoint2: CGPointMake(8.15, 88.77))
        oval2Path.addCurveToPoint(CGPointMake(74.49, 89.47), controlPoint1: CGPointMake(45.57, 90.18), controlPoint2: CGPointMake(57.48, 90.18))
        oval2Path.closePath()
        kRWHomeButtonColor.setFill()
        oval2Path.fill()


        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(33.5, 15.5, 34, 34))
        kRWHomeButtonColor.setFill()
        ovalPath.fill()
        UIColor.lightGrayColor().setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
